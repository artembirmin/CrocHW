package ru.artembirmin.croc.hw5.service;

import ru.artembirmin.croc.hw5.model.Executor;
import ru.artembirmin.croc.hw5.model.Task;

import java.io.File;
import java.util.Iterator;
import java.util.List;
import java.util.prefs.Preferences;

/**
 * –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –±–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–¥ —Ñ–∞–π–ª–æ–º –∑–∞–¥–∞—á.
 */
public class TaskService {

    /**
     * –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏ –∑–∞–¥–∞—á –≤ —Ñ–∞–π–ª.
     */
    private final TaskFileWriter taskFileWriter = new TaskFileWriter();
    /**
     * –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å—á–∏—Ç—ã–≤–∞–µ–Ω–∏—è –∑–∞–¥–∞—á –∏–∑ —Ñ–∞–π–ª–∞.
     */
    private final TaskFileReader taskFileReader = new TaskFileReader();
    /**
     * –¢–µ–∫—É—â–∏–π —Ñ–∞–π–ª —Å –∑–∞–¥–∞—á–∞–º–∏.
     */
    private File currentFile;
    /**
     * –¢–µ–∫—É—â–∏–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∑–∞–¥–∞—á.
     */
    private Executor executor;
    /**
     * –ü–æ—Å–ª–µ–¥–Ω–∏–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª —É –∑–∞–¥–∞—á–∏
     */
    private long lastId = 0;

    /**
     * @param executor    —Ç–µ–∫—É—â–∏–π –∏—Å–ø–æ–ª–Ω—Ç–µ–ª—å –∑–∞–¥–∞—á
     * @param currentFile —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª —Å –∑–∞–¥–∞—á–∞–º–∏
     */
    public TaskService(Executor executor, File currentFile) {
        Preferences preferences = Preferences.userNodeForPackage(TaskService.class);
        lastId = preferences.getLong("lastId",0);
        this.executor = executor;
        this.currentFile = currentFile;
    }

    /**
     * –ú–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª —Å –∑–∞–¥–∞—á–∞–º–∏.
     *
     * @param newCurrentFile –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å –∑–∞–¥–∞—á–∞–º–∏
     */
    public void changeFile(File newCurrentFile) {
        currentFile = newCurrentFile;
    }

    /**
     * –ú–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∑–∞–¥–∞—á.
     *
     * @param newExecutor –Ω–æ–≤—ã–π —Ç–µ–∫—É—â–∏–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∑–∞–¥–∞—á
     */
    public void changeExecutor(Executor newExecutor) {
        executor = newExecutor;
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞.
     *
     * @param task –¥–æ–±–∞–≤–ª—è–µ–º–∞—è –∑–∞–¥–∞—á–∞.
     * @return {@code true}, –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞
     */
    public boolean appendTask(Task task) {
        List<Task> tasks = taskFileReader.readAllTasksFromFile(currentFile);
        taskFileWriter.clear(currentFile);
        tasks.add(task);
        return taskFileWriter.setTasks(currentFile, tasks);
    }

    /**
     * –ó–∞–º–µ–Ω—è–µ—Ç –∑–∞–¥–∞—á—É –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É id –Ω–∞ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É.
     *
     * @param newTask –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞
     * @param id      –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞—á–∏, –Ω–∞ –º–µ—Å—Ç–æ –∫–æ—Ç–æ—Ä–æ–π –≤—Å—Ç–∞–Ω–µ—Ç –Ω–æ–≤–∞—è
     * @return {@code true}, –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ —Å —Ç–∞–∫–∏–º id –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ñ–∞–π–ª–µ
     */
    public boolean replaceTask(Task newTask, long id) {
        List<Task> tasks = taskFileReader.readAllTasksFromFile(currentFile);
        taskFileWriter.clear(currentFile);
        Iterator<Task> taskIterator = tasks.iterator();
        int i = 0;
        while (taskIterator.hasNext()) {
            if (taskIterator.next().getId() == id) {
                break;
            }
            i++;
        }
        try {
            tasks.set(i, newTask);
        } catch (IndexOutOfBoundsException e) {
            return false;
        }
        return taskFileWriter.setTasks(currentFile, tasks);
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –∏–¥–Ω–µ—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É.
     *
     * @param id –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
     * @return {@code true}, –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ —Å —Ç–∞–∫–∏–º id –Ω–∞–π–¥–µ–Ω–∞ —Å —É–¥–∞–ª–µ–Ω–∞
     */
    public boolean remove(long id) {
        List<Task> tasks = taskFileReader.readAllTasksFromFile(currentFile);
        // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤ —Ñ–∞–π–ª–µ –¥—Ä—É–≥–æ–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö.
        if (tasks == null) {
            return false;
        }
        for (Task task : tasks) {
            // –ò—â–µ–º –∑–∞–¥–∞—á—É –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É id.
            if (task.getId() == id) {
                tasks.remove(task);
                // –ï—Å–ª–∏ –æ—á–∏—Å—Ç–∏—Ç—å —Ñ–∞–π–ª –Ω–µ —É–¥–∞–ª–æ—Å—å.
                if (!taskFileWriter.clear(currentFile)) {
                    return false;
                }
                return taskFileWriter.setTasks(currentFile, tasks);
            }
        }
        // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –ø–æ —Ç–∞–∫–æ–º—É id –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.
        return false;
    }

    /**
     * –ß–∏—Ç–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ –∏–∑ {@link TaskService#currentFile}
     *
     * @return —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω –∏ —á—Ç–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å –±–µ–∑ –æ—à–∏–±–æ–∫, –∏–Ω–∞—á–µ null
     */
    public List<Task> readAllTasks() {
        return taskFileReader.readAllTasksFromFile(currentFile);
    }

    /**
     * –ù–∞—Ö–æ–¥–∏—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–¥–∞—á—É –ø–æ id.
     *
     * @param id –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–æ–∏—Å–∫
     * @return –Ω–∞–π–¥–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –∏–ª–∏ {@code null}, –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ —Å —Ç–∞–∫–∏–º id –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
     */
    public Task findById(long id) {
        return taskFileReader.findById(currentFile, id);
    }

    /**
     * //TODOüéÇ
     * –ë–µ—Ä–µ—Ç id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç 1.
     *
     * @return
     */
    public long generateId() {

        return lastId++;
    }

    public Executor getExecutor() {
        return executor;
    }

    public void save() {
        Preferences preferences = Preferences.userNodeForPackage(TaskService.class);
        preferences.putLong("lastId",lastId);
    }

    public boolean clear() {
        lastId = 0;
        return taskFileWriter.clear(currentFile);
    }
}
